{
  "openapi": "3.0.0",
  "info": {
    "title": "Chayn Survivor AI API",
    "version": "1.0.0",
    "description": "API endpoints for the Chayn Survivor AI application, including policy validation, data collection, and letter generation."
  },
  "servers": [
    {
      "url": "http://localhost:3000",
      "description": "Local Development Server"
    }
  ],
  "paths": {
    "/api/policies/validate": {
      "post": {
        "summary": "Initiate or process policy validation for platforms",
        "description": "Handles the initialization of a policy validation session or processes the next document in an ongoing session. This route interacts with AI models for analysis and potentially GitHub for PR creation.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "action": {
                    "type": "string",
                    "description": "The action to perform: 'initialize' to start a new session, or 'process_next_document' to continue an existing one.",
                    "enum": ["initialize", "process_next_document"]
                  },
                  "validationId": {
                    "type": "string",
                    "description": "Required if action is 'process_next_document'. The ID of the validation session.",
                    "nullable": true
                  }
                },
                "required": ["action"]
              },
              "examples": {
                "initialize": {
                  "summary": "Initialize Validation",
                  "value": {
                    "action": "initialize"
                  }
                },
                "processDocument": {
                  "summary": "Process Next Document",
                  "value": {
                    "action": "process_next_document",
                    "validationId": "validation_1234567890_abcde"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation, returns validation status or progress.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": { "type": "boolean" },
                    "validationId": { "type": "string" },
                    "status": { "type": "string" },
                    "data": { "type": "object" }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid action or missing parameters."
          },
          "404": {
            "description": "Validation session not found."
          },
          "500": {
            "description": "Internal server error during validation process."
          }
        }
      },
      "options": {
        "summary": "CORS preflight for policies validation",
        "responses": {
          "200": {
            "description": "CORS preflight successful."
          }
        }
      }
    },
    "/api/dev-data-collection": {
      "post": {
        "summary": "Collects development data",
        "description": "Endpoint for collecting development-related data, typically used in non-production environments to gather insights on form submissions and generated letters.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "formData": {
                    "type": "object",
                    "description": "The form data submitted by the user."
                  },
                  "generatedLetter": {
                    "type": "object",
                    "description": "The letter generated by the AI."
                  },
                  "sessionId": {
                    "type": "string",
                    "description": "Unique session identifier."
                  },
                  "completionTimeSeconds": {
                    "type": "number",
                    "description": "Time taken to complete the process in seconds."
                  }
                },
                "required": ["formData", "generatedLetter"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Data successfully collected."
          },
          "400": {
            "description": "Missing required fields."
          },
          "403": {
            "description": "Endpoint only available in development environment."
          },
          "500": {
            "description": "Internal server error during data collection."
          }
        }
      },
      "options": {
        "summary": "CORS preflight for dev data collection",
        "responses": {
          "200": {
            "description": "CORS preflight successful."
          }
        }
      }
    },
    "/api/feedback": {
      "post": {
        "summary": "Submits user feedback",
        "description": "Allows users to submit general feedback, which is then sent to Zapier.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "Arbitrary feedback payload."
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Feedback successfully submitted."
          },
          "500": {
            "description": "Internal server error during feedback submission."
          }
        }
      },
      "options": {
        "summary": "CORS preflight for feedback submission",
        "responses": {
          "200": {
            "description": "CORS preflight successful."
          }
        }
      }
    },
    "/api/follow-up-questions": {
      "post": {
        "summary": "Generates follow-up questions",
        "description": "Uses AI to generate targeted follow-up questions based on the user's initial input, aiming to gather essential information for a stronger takedown request.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LetterRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully generated follow-up questions.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FollowUpQuestion"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error during question generation."
          }
        }
      }
    },
    "/api/generate-letter": {
      "post": {
        "summary": "Generates a takedown letter",
        "description": "Uses AI to generate a formal takedown request letter based on the provided user data and platform policies.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LetterRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully generated letter.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GeneratedLetter"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error during letter generation."
          }
        }
      }
    },
    "/api/quality-check-letter": {
      "post": {
        "summary": "Performs quality check on a generated letter",
        "description": "Audits a previously generated letter against a set of quality criteria and provides an improved version if issues are found.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "letter": {
                    "type": "object",
                    "properties": {
                      "subject": { "type": "string" },
                      "body": { "type": "string" }
                    },
                    "required": ["subject", "body"]
                  },
                  "formData": {
                    "$ref": "#/components/schemas/LetterRequest"
                  }
                },
                "required": ["letter", "formData"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully performed quality check.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QualityCheckResponse"
                }
              }
            }
          },
          "400": {
            "description": "Missing required parameters."
          },
          "500": {
            "description": "Internal server error during quality check."
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "PlatformInfo": {
        "type": "object",
        "properties": {
          "platformId": {
            "type": "string",
            "enum": ["facebook", "instagram", "tiktok", "onlyfans", "pornhub", "other"]
          },
          "platformName": { "type": "string" },
          "isCustom": { "type": "boolean" },
          "customName": { "type": "string", "nullable": true }
        },
        "required": ["platformId", "platformName", "isCustom"]
      },
      "InitialQuestionsData": {
        "type": "object",
        "properties": {
          "contentLocationType": { "type": "string", "enum": ["url", "description"] },
          "contentUrl": { "type": "string", "nullable": true },
          "contentDescription": { "type": "string", "nullable": true },
          "contentType": { "type": "string", "enum": ["intimate", "personal", "private", "other"] },
          "contentContext": {
            "type": "string",
            "enum": ["hacked", "impersonation", "relationship", "unknown", "other"]
          },
          "imageUploadDate": { "type": "string" },
          "imageTakenDate": { "type": "string" },
          "ownershipEvidence": { "type": "string" },
          "impactStatement": { "type": "string" },
          "imageIdentification": { "type": "string" }
        },
        "required": [
          "contentLocationType",
          "contentType",
          "contentContext",
          "imageUploadDate",
          "imageTakenDate",
          "ownershipEvidence",
          "impactStatement",
          "imageIdentification"
        ]
      },
      "ReportingDetailsData": {
        "type": "object",
        "properties": {
          "standardProcessDetails": { "type": "string", "nullable": true },
          "escalatedProcessDetails": { "type": "string", "nullable": true },
          "responseReceived": { "type": "string", "nullable": true },
          "additionalStepsTaken": { "type": "string", "nullable": true }
        }
      },
      "LetterRequest": {
        "type": "object",
        "properties": {
          "initialQuestions": { "$ref": "#/components/schemas/InitialQuestionsData" },
          "reportingDetails": {
            "$ref": "#/components/schemas/ReportingDetailsData",
            "nullable": true
          },
          "followUp": {
            "type": "object",
            "additionalProperties": { "type": "string" },
            "nullable": true
          },
          "platformInfo": { "$ref": "#/components/schemas/PlatformInfo" }
        },
        "required": ["initialQuestions", "platformInfo"]
      },
      "GeneratedLetter": {
        "type": "object",
        "properties": {
          "subject": { "type": "string" },
          "body": { "type": "string" },
          "nextSteps": {
            "type": "array",
            "items": { "type": "string" },
            "nullable": true
          }
        },
        "required": ["subject", "body"]
      },
      "FollowUpQuestion": {
        "type": "object",
        "properties": {
          "id": { "type": "string" },
          "question": { "type": "string" },
          "context": { "type": "string" },
          "reason": { "type": "string", "enum": ["insufficient", "clarification", "support"] }
        },
        "required": ["id", "question", "context", "reason"]
      },
      "QualityCheckResponse": {
        "type": "object",
        "properties": {
          "issues": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "severity": { "type": "string", "enum": ["CRITICAL", "MINOR"] },
                "code": {
                  "type": "string",
                  "enum": [
                    "HALLUCINATION",
                    "SENSITIVE_DATA",
                    "POLICY_ERROR",
                    "BANNED_TERM",
                    "AGGRESSIVE_TONE",
                    "LANGUAGE",
                    "IMPROPER_TONE",
                    "STRUCTURE",
                    "INFO_HANDLING",
                    "SUBJECT_LINE"
                  ]
                },
                "description": { "type": "string" }
              },
              "required": ["severity", "code", "description"]
            }
          },
          "improvedLetter": {
            "type": "object",
            "properties": {
              "subject": { "type": "string" },
              "body": { "type": "string" }
            },
            "required": ["subject", "body"]
          }
        },
        "required": ["issues", "improvedLetter"]
      }
    }
  }
}
