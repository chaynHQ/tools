@@ .. @@
-export interface RetryConfig {
-  maxRetries: number;
-  baseDelay: number;
-  maxDelay: number;
-  backoffMultiplier: number;
-}
-
-export interface RetryableOperation<T> {
-  (): Promise<T>;
-}
-
-export class RetryHandler {
-  private config: RetryConfig;
-
-  constructor(config: Partial<RetryConfig> = {}) {
-    this.config = {
-      maxRetries: 3,
-      baseDelay: 1000,
-      maxDelay: 10000,
-      backoffMultiplier: 2,
-      ...config,
-    };
-  }
-
-  async execute<T>(
-    operation: RetryableOperation<T>,
-    context: string = 'operation'
-  ): Promise<T> {
-    let lastError: Error;
-    
-    for (let attempt = 0; attempt <= this.config.maxRetries; attempt++) {
-      try {
-        console.log(`[RetryHandler] Attempting ${context} (attempt ${attempt + 1}/${this.config.maxRetries + 1})`);
-        return await operation();
-      } catch (error) {
-        lastError = error as Error;
-        console.error(`[RetryHandler] ${context} failed on attempt ${attempt + 1}:`, error);
-        
-        if (attempt === this.config.maxRetries) {
-          console.error(`[RetryHandler] ${context} failed after ${this.config.maxRetries + 1} attempts`);
-          break;
-        }
-        
-        const delay = Math.min(
-          this.config.baseDelay * Math.pow(this.config.backoffMultiplier, attempt),
-          this.config.maxDelay
-        );
-        
-        console.log(`[RetryHandler] Waiting ${delay}ms before retry...`);
-        await this.sleep(delay);
-      }
-    }
-    
-    throw lastError!;
-  }
-
-  private sleep(ms: number): Promise<void> {
-    return new Promise(resolve => setTimeout(resolve, ms));
-  }
-
-  // Utility method for common API retry scenarios
-  async executeApiCall<T>(
-    apiCall: RetryableOperation<T>,
-    operationName: string
-  ): Promise<T> {
-    return this.execute(apiCall, `API call: ${operationName}`);
-  }
-
-  // Utility method for file operations
-  async executeFileOperation<T>(
-    fileOperation: RetryableOperation<T>,
-    operationName: string
-  ): Promise<T> {
-    return this.execute(fileOperation, `File operation: ${operationName}`);
-  }
-}
-
-// Export a default instance with standard configuration
-export const defaultRetryHandler = new RetryHandler();
+// This file is currently unused but kept for potential future retry logic
+// TODO: Implement retry logic in API calls if needed